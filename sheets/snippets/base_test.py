# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import unittest

import httplib2
from googleapiclient import errors
from googleapiclient.discovery import build
from oauth2client.client import GoogleCredentials


class BaseTest(unittest.TestCase):

  @classmethod
  def setUpClass(cls):
    cls.credentials = cls.create_credentials()
    http = cls.credentials.authorize(httplib2.Http())
    cls.credentials.refresh(http)
    cls.service = build("sheets", "v4", http=http)
    cls.drive_service = build("drive", "v3", http=http)
    # Hide STDOUT output generated by snippets.
    cls.stdout = sys.stdout
    sys.stdout = None

  @classmethod
  def tearDownClass(cls):
    # Restore STDOUT.
    sys.stdout = cls.stdout

  @classmethod
  def create_credentials(cls):
    cls.credentials = GoogleCredentials.get_application_default()
    scope = ["https://www.googleapis.com/auth/drive"]
    return cls.credentials.create_scoped(scope)

  def setUp(self):
    self.files_to_delete = []

  def tearDown(self):
    for file_id in self.files_to_delete:
      try:
        self.drive_service.files().delete(fileId=file_id).execute()
      except errors.HttpError:
        print(f"Unable to delete file {file_id}", file=sys.stderr)

  def delete_file_on_cleanup(self, file_id):
    self.files_to_delete.append(file_id)

  def create_test_spreadsheet(self):
    spreadsheet = {"properties": {"title": "Sales Report"}}
    spreadsheet = (
        self.service.spreadsheets()
        .create(body=spreadsheet, fields="spreadsheetId")
        .execute()
    )
    self.delete_file_on_cleanup(spreadsheet.get("spreadsheetId"))
    return spreadsheet.get("spreadsheetId")

  def populate_values(self, spreadsheet_id):
    body = {
        "requests": [
            {
                "repeatCell": {
                    "range": {
                        "sheetId": 0,
                        "startRowIndex": 0,
                        "endRowIndex": 10,
                        "startColumnIndex": 0,
                        "endColumnIndex": 10,
                    },
                    "cell": {"userEnteredValue": {"stringValue": "Hello"}},
                    "fields": "userEnteredValue",
                }
            }
        ]
    }
    self.service.spreadsheets().batchUpdate(
        spreadsheetId=spreadsheet_id, body=body
    ).execute()


if __name__ == "__main__":
  unittest.main()
